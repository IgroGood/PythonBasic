# 1. Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника. В расчете необходимо использовать формулу: (выработка в часах * ставка в час) + премия. Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
# 2. Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].
# 3. Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.
# 4. Представлен список чисел. Определить элементы списка, не имеющие повторений. Сформировать итоговый массив чисел, соответствующих требованию. Элементы вывести в порядке их следования в исходном списке. Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]
# 5. Реализовать формирование списка, используя функцию range() и возможности генератора. В список должны войти четные числа от 100 до 1000 (включая границы). Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().
# 6. Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
# Подсказка: использовать функцию count() и cycle() модуля itertools. Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл. Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.
# 7. Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение. При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n). Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

#1
from functools import reduce


def employee_payroll(output_in_hours, rate_per_hour, the_prize):
    return output_in_hours * rate_per_hour + the_prize
#2
numbers_list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]
for i in range(1, len(numbers_list)):
    if numbers_list[i] > numbers_list[i - 1]:
        print(numbers_list[i], end=" ")
print()

#3
print([i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0])

#4
def search_item(A, key, limit = 0):
    count_item = 0
    for i in range(len(A)):
        if A[i] == key:
            count_item += 1
            if count_item > limit:
                return True
    return False

numbers_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
numbers_result = [number for number in numbers_list if search_item(numbers_list, number, 1) == False]
print(numbers_result)

#5
numbers_list = [i for i in range(100, 1000) if i % 2 == 0]
print(reduce(lambda a,b: a + b, numbers_list))

#6
def generator(start=0, count=None):
    if count is None:
        count = 10
    for i in range(start, start + count + 1):
        yield i

def cycle(iterable):
    saved = []
    for element in iterable:
        yield element
        saved.append(element)
    while saved:
        for element in saved:
              yield element

for i in generator(10, 2):
    print(f"item: {i}")

x = list(range(5))
count_element = 10
for i, j in enumerate(cycle(x)):
    print(j, end=' ')
    if i > count_element:
        print()
        break

#7
def fact(n):
    fact = 1
    for i in range(1, n + 1):
        yield fact * i
        fact += 1

n = 5
for el in fact(n):
    print(el)